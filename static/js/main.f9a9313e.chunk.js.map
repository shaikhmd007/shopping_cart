{"version":3,"sources":["Products.jsx","Cart.jsx","App.js","serviceWorker.js","index.js"],"names":["Products","setCart","cart","useState","category","name","cost","image","products","setCategory","onChange","e","target","value","className","filter","product","map","idx","key","src","alt","onClick","newCart","itemInCart","find","item","quantity","push","addToCart","Cart","length","amount","setQuantity","parseInt","productToRemove","reduce","sum","App","page","setPage","navigateTo","nextPage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2PAKe,SAASA,EAAT,GAAsC,IAAlBC,EAAiB,EAAjBA,QAASC,EAAQ,EAARA,KAAQ,EAC/BC,mBAAS,CAC1B,CACEC,SALU,UAMVC,KAAM,aACNC,KAAM,KACNC,MACE,8IAEJ,CACEH,SAbc,kBAcdC,KAAM,UACNC,KAAM,MACNC,MACE,iJAbCC,EAD2C,sBAmClBL,mBAtCd,mBAGgC,mBAmC3CC,EAnC2C,KAmCjCK,EAnCiC,KA2ClD,OACE,oCACE,wCADF,oBAGE,4BAAQC,SAAU,SAACC,GAAD,OAAOF,EAAYE,EAAEC,OAAOC,SAC5C,4BAAQA,MAnDI,sCAoDZ,4BAAQA,MAnDA,uBAqDV,yBAAKC,UAAU,YAbVN,EAASO,QACd,SAACC,GAAD,OAAaA,EAAQZ,WAAaA,KAaPa,KAAI,SAACD,EAASE,GAAV,OAC3B,yBAAKJ,UAAU,UAAUK,IAAKD,GAC5B,4BAAKF,EAAQX,MACb,gCAAMW,EAAQV,MACd,yBAAKc,IAAKJ,EAAQT,MAAOc,IAAKL,EAAQX,OACtC,4BAAQiB,QAAS,kBAvCT,SAACN,GACjB,IAAIO,EAAO,YAAOrB,GACdsB,EAAaD,EAAQE,MACvB,SAACC,GAAD,OAAUV,EAAQX,OAASqB,EAAKrB,QAE9BmB,EACFA,EAAWG,YAEXH,EAAU,eACLR,EADK,CAERW,SAAU,IAEZJ,EAAQK,KAAKJ,IAEfvB,EAAQsB,GAyBuBM,CAAUb,KAAjC,qBC5DG,SAASc,EAAT,GAAkC,IAAlB5B,EAAiB,EAAjBA,KAAMD,EAAW,EAAXA,QA0BnC,OACE,oCACE,oCACCC,EAAK6B,OAAS,GACb,4BAAQT,QAtBI,WAChBrB,EAAQ,MAqBJ,cAEF,yBAAKa,UAAU,YACZZ,EAAKe,KAAI,SAACD,EAASE,GAAV,OACR,yBAAKJ,UAAU,UAAUK,IAAKD,GAC5B,4BAAKF,EAAQX,MACb,gCAAMW,EAAQV,MACd,2BACEO,MAAOG,EAAQW,SACfjB,SAAU,SAACC,GAAD,OA3BF,SAACK,EAASgB,GAC5B,IAAMT,EAAO,YAAOrB,GACpBqB,EAAQE,MACN,SAACC,GAAD,OAAUA,EAAKrB,OAASW,EAAQX,QAChCsB,SAAWK,EACb/B,EAAQsB,GAuBIU,CACEjB,EACAkB,SAASvB,EAAEC,OAAOC,WAIxB,yBAAKO,IAAKJ,EAAQT,MAAOc,IAAKL,EAAQX,OACtC,4BAAQiB,QAAS,kBA3BHa,EA2BwBnB,OA1B9Cf,EACEC,EAAKa,QAAO,SAACC,GAAD,OAAaA,IAAYmB,MAFlB,IAACA,IA2Bd,eAON,6CApDKjC,EAAKkC,QACV,SAACC,EAAD,UAA6BA,EAA7B,EAAQ/B,KAAR,EAAcqB,WACd,KCsCSW,MApCf,WAAgB,IAAD,EACWnC,mBAAS,IADpB,mBACND,EADM,KACAD,EADA,OAEWE,mBALJ,YAGP,mBAENoC,EAFM,KAEAC,EAFA,KAIPC,EAAa,SAACC,GAClBF,EAAQE,IAUV,OACE,yBAAK5B,UAAU,OACb,gCACE,4BAAQQ,QAAS,kBAAMmB,EApBb,UAoBV,eATGvC,EAAKkC,QACV,SAACC,EAAD,UAAuBA,EAAvB,EAAQV,WACR,GAOE,KAIA,4BAAQL,QAAS,kBAAMmB,EAzBT,cAyBd,kBAzBc,aA6BfF,GACC,kBAACvC,EAAD,CAAUE,KAAMA,EAAMD,QAASA,IA7BrB,SA+BXsC,GACC,kBAACT,EAAD,CAAM5B,KAAMA,EAAMD,QAASA,MC1Bf0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f9a9313e.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst HOME_GARDEN = 'home and garden';\nconst UTILITY = 'utility';\n\nexport default function Products({ setCart, cart }) {\n  const [products] = useState([\n    {\n      category: UTILITY,\n      name: 'AA Battery',\n      cost: 2.99,\n      image:\n        'https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQ5-QAul_NfAs-s0XW9M087xWyPOGWvbfYjmqSl0QXabZRSYoid47i7kISiAteyIh0YOci5mtQ&usqp=CAc',\n    },\n    {\n      category: HOME_GARDEN,\n      name: 'Blanket',\n      cost: 19.99,\n      image:\n        'https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSpwdYDmUL_ZEqhLV7ZWRdQAU7DGcGaxtCt7SrTlL9umrQs2Un7rj9Nbb9Vq01RtEfA0eAVmdt-&usqp=CAc',\n    },\n  ]);\n\n  const addToCart = (product) => {\n    let newCart = [...cart];\n    let itemInCart = newCart.find(\n      (item) => product.name === item.name\n    );\n    if (itemInCart) {\n      itemInCart.quantity++;\n    } else {\n      itemInCart = {\n        ...product,\n        quantity: 1,\n      };\n      newCart.push(itemInCart);\n    }\n    setCart(newCart);\n  };\n\n  const [category, setCategory] = useState(HOME_GARDEN);\n\n  const getProductsInCategory = () => {\n    return products.filter(\n      (product) => product.category === category\n    );\n  };\n\n  return (\n    <>\n      <h1>Products</h1>\n      Select a category\n      <select onChange={(e) => setCategory(e.target.value)}>\n        <option value={HOME_GARDEN}>{HOME_GARDEN}</option>\n        <option value={UTILITY}>{UTILITY}</option>\n      </select>\n      <div className=\"products\">\n        {getProductsInCategory().map((product, idx) => (\n          <div className=\"product\" key={idx}>\n            <h3>{product.name}</h3>\n            <h4>${product.cost}</h4>\n            <img src={product.image} alt={product.name} />\n            <button onClick={() => addToCart(product)}>\n              Add to Cart\n            </button>\n          </div>\n        ))}\n      </div>\n    </>\n  );\n}\n","import React from 'react';\n\nexport default function Cart({ cart, setCart }) {\n  const getTotalSum = () => {\n    return cart.reduce(\n      (sum, { cost, quantity }) => sum + cost * quantity,\n      0\n    );\n  };\n\n  const clearCart = () => {\n    setCart([]);\n  };\n\n  const setQuantity = (product, amount) => {\n    const newCart = [...cart];\n    newCart.find(\n      (item) => item.name === product.name\n    ).quantity = amount;\n    setCart(newCart);\n  };\n\n  const removeFromCart = (productToRemove) => {\n    setCart(\n      cart.filter((product) => product !== productToRemove)\n    );\n  };\n\n  return (\n    <>\n      <h1>Cart</h1>\n      {cart.length > 0 && (\n        <button onClick={clearCart}>Clear Cart</button>\n      )}\n      <div className=\"products\">\n        {cart.map((product, idx) => (\n          <div className=\"product\" key={idx}>\n            <h3>{product.name}</h3>\n            <h4>${product.cost}</h4>\n            <input\n              value={product.quantity}\n              onChange={(e) =>\n                setQuantity(\n                  product,\n                  parseInt(e.target.value)\n                )\n              }\n            />\n            <img src={product.image} alt={product.name} />\n            <button onClick={() => removeFromCart(product)}>\n              Remove\n            </button>\n          </div>\n        ))}\n      </div>\n\n      <div>Total Cost: ${getTotalSum()}</div>\n    </>\n  );\n}\n","import React, { useState } from 'react';\nimport './App.css';\nimport Products from './Products';\nimport Cart from './Cart';\n\nconst PAGE_PRODUCTS = 'products';\nconst PAGE_CART = 'cart';\n\nfunction App() {\n  const [cart, setCart] = useState([]);\n  const [page, setPage] = useState(PAGE_PRODUCTS);\n\n  const navigateTo = (nextPage) => {\n    setPage(nextPage);\n  };\n\n  const getCartTotal = () => {\n    return cart.reduce(\n      (sum, { quantity }) => sum + quantity,\n      0\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <button onClick={() => navigateTo(PAGE_CART)}>\n          Go to Cart ({getCartTotal()})\n        </button>\n\n        <button onClick={() => navigateTo(PAGE_PRODUCTS)}>\n          View Products\n        </button>\n      </header>\n      {page === PAGE_PRODUCTS && (\n        <Products cart={cart} setCart={setCart} />\n      )}\n      {page === PAGE_CART && (\n        <Cart cart={cart} setCart={setCart} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}